#lang racket

(define (count-elements lst)
  (cond ((null? lst) '())
        ((member (car lst) (cdr lst))
         (cons (car lst) (count-elements (remove* (car lst) lst))))
        (else (count-elements (cdr lst)))))

(define (remove* elt lst)
  (cond ((null? lst) '())
        ((equal? elt (car lst)) (remove* elt (cdr lst)))
        (else (cons (car lst) (remove* elt (cdr lst))))))

(define (bag-difference bag1 bag2)
  (let ((counts1 (count-elements bag1))
        (counts2 (count-elements bag2)))
    (define (helper elt count)
      (if (zero? count)
          '()
          (cons elt (helper elt (- count 1)))))
    (foldl (lambda (elt acc)
             (append acc (helper elt (- (cadr (assoc elt counts1)) (cadr (assoc elt counts2))))))
           '()
           (append counts1 counts2))))

(define (bag-union bag1 bag2)
  (let ((counts1 (count-elements bag1))
        (counts2 (count-elements bag2)))
    (define (helper elt count)
      (if (zero? count)
          '()
          (cons elt (helper elt (- count 1)))))
    (foldl (lambda (elt acc)
             (append acc (helper elt (max (cadr (assoc elt counts1)) (cadr (assoc elt counts2))))))
           '()
           (append counts1 counts2))))

(define (bag-intersection bag1 bag2)
  (let ((counts1 (count-elements bag1))
        (counts2 (count-elements bag2)))
    (define (helper elt count)
      (if (zero? count)
          '()
          (cons elt (helper elt (- count 1)))))
    (foldl (lambda (elt acc)
             (append acc (helper elt (min (cadr (assoc elt counts1)) (cadr (assoc elt counts2))))))
           '()
           (append counts1 counts2))))

;; Test examples
(displayln (bag-difference '(a a b a) '(b a a))) ; '(a)
(displayln (bag-difference '(a b a a) '(a b c))) ; '(a a)
(displayln (bag-difference '(a b c) '(a b a a))) ; '(c)
(displayln (bag-difference '(a b c) '(a b c))) ; '()
(displayln (bag-difference '() '(a b a a))) ; '()
(displayln (bag-difference '(a b a a) '())) ; '(b a a a)

(displayln (bag-union '(a a b a) '(b a a))) ; '(a b a a)
(displayln (bag-union '(a b a a) '(a b c))) ; '(a a a b c)
(displayln (bag-union '(a b c) '(a b a a))) ; '(c a b a a)
(displayln (bag-union '(a b c) '(a b c))) ; '(a b c)
(displayln (bag-union '() '(a b a a))) ; '(a b a a)
(displayln (bag-union '(a b a a) '())) ; '(a b a a)

(displayln (bag-intersection '(a a b a) '(
